# -*- coding: utf-8 -*-
"""EDA.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/14yYxd_e7exLw5YkuttiBPcX5qPG14fSq
"""

# Documentation gspread
# https://docs.gspread.org/en/latest/user-guide.html

import numpy as np
import pandas as pd
import seaborn as sns
import datetime


!pip install --upgrade -q gspread

import pandas as pd

from google.colab import auth
auth.authenticate_user()

import gspread
from google.auth import default
creds, _ = default()

gc = gspread.authorize(creds)


# Insert custom functions
!pip install pydrive                             # Package to use Google Drive API - not installed in Colab VM by default
from pydrive.auth import GoogleAuth
from pydrive.drive import GoogleDrive
from oauth2client.client import GoogleCredentials

gauth = GoogleAuth()
gauth.credentials = GoogleCredentials.get_application_default()

drive = GoogleDrive(gauth)
your_module = drive.CreateFile({"id": "1dizGN2VPwZ_GycmTgMXuh7tdos_mkSV5"})   # "your_module_file_id" is the part after "id=" in the shareable link
your_module.GetContentFile("funciones.py")          # Save the .py module file to Colab VM
import funciones as fun

# Load historical Data

t_sheet_url = "https://docs.google.com/spreadsheets/d/1pxSigN-tBbPKUZTv2GT_KrxQhWG5uYJ509ZmmDQsfQc/edit#gid=1858808857"
tab_name = "Train"

worksheet = gc.open_by_url(t_sheet_url)

df = pd.DataFrame.from_records( 
    worksheet.worksheet(tab_name).get_all_values(),
    )

df.columns = df.loc[0].values
df = df.iloc[ 1: ]

type_dic = {
    'bull' : int ,
    'D_MVA200': float , 
    'length': int , 
    'heigth': float , 
    'type': str , 
    'entry': float , 
    'stop': float , 
    'gain': int ,
    'target': float , 
    'stop_trade': float , 
    'resistance_support': str , 
    'MVA200_interact': int,
    'D_target': float,
    'D_stop_trade': float,
    'pair': str
}

df = df.astype( type_dic )

df.head()

import plotly.express as px

# Trade analysis on bull tendency
dfbull = df[ (df.bull == 1) & (df['type'] == 'Double Bottom') & (df.resistance_support == "over")]

px.scatter(
    dfbull,
    x = 'D_target',
    y = 'D_MVA200',
    color = dfbull['gain'].astype(str),
    color_discrete_map={
                "0": "red",
                "1": "blue"
                },
    category_orders={
        "gain": ["0", "1"]
        },
    facet_col = "resistance_support",
    facet_row = "type"
)

px.histogram(
    dfbull,
    x = 'type',
    color = dfbull['gain'].astype(str),
    color_discrete_map={
                "0": "red",
                "1": "blue"
                },
    category_orders={
        "gain": ["0", "1"]
        },
    barmode='group',
    histfunc='count',
    facet_row = "MVA200_interact"
)

dfbull.gain.value_counts()[1] / len( dfbull.gain )

# Trade analysis on bull tendency
nodfbull = df[ (df.bull == 0) & (df['type'] == 'Double Top') & (df.resistance_support == "below") ]

px.scatter(
    nodfbull,
    x = 'D_target',
    y = 'D_MVA200',
    color = nodfbull['gain'].astype(str),
    color_discrete_map={
                "0": "red",
                "1": "blue"
                },
    category_orders={
        "gain": ["0", "1"]
        },
    facet_col = "resistance_support",
    facet_row = "type"
)

px.histogram(
    nodfbull,
    x = 'type',
    color = nodfbull['gain'].astype(str),
    color_discrete_map={
                "0": "red",
                "1": "blue"
                },
    category_orders={
        "gain": ["0", "1"]
        },
    barmode='group',
    histfunc='count',
    facet_row = "MVA200_interact"
)

nodfbull.gain.value_counts()[1] / len( nodfbull.gain )

px.scatter(
    df,
    x = 'length',
    y = 'heigth',
    color = df['gain'].astype(str),
    color_discrete_map={
                "0": "red",
                "1": "blue"
                },
    category_orders={
        "gain": ["0", "1"]
        },
    facet_col = "resistance_support",
    facet_row =  "type"
)

px.histogram(
    df,
    x = 'type',
    color = df['gain'].astype(str),
    color_discrete_map={
                "0": "red",
                "1": "blue"
                },
    category_orders={
        "gain": ["0", "1"]
        },
    facet_col = "resistance_support",
    facet_row = "MVA200_interact",
    barmode='group',
    histfunc='count'
)

px.histogram(
    df,
    x = 'heigth',
    color = df['gain'].astype(str),
    color_discrete_map={
                "0": "red",
                "1": "blue"
                },
    category_orders={
        "gain": ["0", "1"]
        },
    facet_col = "type",
    nbins = 20
)

testdf=df.tail(100)

 testdf[ testdf["type"] == "Double Top" ].tail()

px.histogram(
    nodfbull,
    x = 'D_MVA200',
    color = nodfbull['gain'].astype(str),
    color_discrete_map={
                "0": "red",
                "1": "blue"
                },
    category_orders={
        "gain": ["0", "1"]
        },
    facet_col = "type",
    facet_row = "MVA200_interact",
    nbins = 20
)

nodfbull[ (nodfbull.D_MVA200 < -0.015) & (nodfbull['type'] == "Double Top" ) ].gain.value_counts()[1]/ len( nodfbull[ (nodfbull.D_MVA200 < -0.015) & (nodfbull['type'] == "Double Top" ) ].gain )

px.histogram(
    dfbull,
    x = 'D_MVA200',
    color = dfbull['gain'].astype(str),
    color_discrete_map={
                "0": "red",
                "1": "blue"
                },
    category_orders={
        "gain": ["0", "1"]
        },
    facet_col = "type",
    facet_row = "MVA200_interact",
    nbins = 20
)

print( dfbull[ (dfbull.D_MVA200 > 0.015) & (dfbull['type'] == "Double Bottom") ].gain.value_counts()[1]/ len(dfbull[ (dfbull.D_MVA200 > 0.015) & (dfbull['type'] == "Double Bottom") ].gain) , len(dfbull[ (dfbull.D_MVA200 > 0.015) & (dfbull['type'] == "Double Bottom") ].gain))

df

print( df[ (df.bull == 1) & (df.D_MVA200 > 0 ) & (df['type'] == "Double Bottom" ) & (df.resistance_support == "over" ) ].gain.sum() , df[ (df.bull == 1) & (df.D_MVA200 > 0 ) & (df['type'] == "Double Bottom" ) & (df.resistance_support == "over" ) ].gain.count() )
df[ (df.bull == 1) & (df.D_MVA200 > 0 ) & (df['type'] == "Double Bottom" ) & (df.resistance_support == "over" ) ].gain.sum() / df[ (df.bull == 1) & (df.D_MVA200 > 0 ) & (df['type'] == "Double Bottom" ) & (df.resistance_support == "over" ) ].gain.count()

# sin bull
print( df[ (df.D_MVA200 > 0 ) & (df['type'] == "Double Bottom" ) & (df.resistance_support == "over" ) ].gain.sum() , df[  (df.D_MVA200 > 0 ) & (df['type'] == "Double Bottom" ) & (df.resistance_support == "over" ) ].gain.count() )
df[  (df.D_MVA200 > 0 ) & (df['type'] == "Double Bottom" ) & (df.resistance_support == "over" ) ].gain.sum() / df[  (df.D_MVA200 > 0 ) & (df['type'] == "Double Bottom" ) & (df.resistance_support == "over" ) ].gain.count()

# sin bull , resistance
print( df[ (df.D_MVA200 > 0 ) & (df['type'] == "Double Bottom" ) ].gain.sum() , df[  (df.D_MVA200 > 0 ) & (df['type'] == "Double Bottom" )  ].gain.count() )
df[  (df.D_MVA200 > 0 ) & (df['type'] == "Double Bottom" ) ].gain.sum() / df[  (df.D_MVA200 > 0 ) & (df['type'] == "Double Bottom" )  ].gain.count()

# sin bull , resistance con MVA200_interact
print( df[ (df.D_MVA200 > 0 ) & (df['type'] == "Double Bottom" ) & (df.MVA200_interact == 1) ].gain.sum() , df[  (df.D_MVA200 > 0 ) & (df['type'] == "Double Bottom" ) & (df.MVA200_interact == 1)  ].gain.count() )
df[  (df.D_MVA200 > 0 ) & (df['type'] == "Double Bottom" ) & (df.MVA200_interact == 1) ].gain.sum() / df[  (df.D_MVA200 > 0 ) & (df['type'] == "Double Bottom" ) & (df.MVA200_interact == 1) ].gain.count()

# sin bull , resistance , D_MVA200 con MVA200_interact
print(  
    df[(df['type'] == "Double Bottom" ) & (df.MVA200_interact == 1) ].gain.sum() , 
    df[  (df['type'] == "Double Bottom" ) & (df.MVA200_interact == 1)  ].gain.count() 
    )

df[  (df['type'] == "Double Bottom" ) & (df.MVA200_interact == 1) ].gain.sum() / df[  (df['type'] == "Double Bottom" ) & (df.MVA200_interact == 1) ].gain.count()

# sin D_MVA200
print( 
    df[ (df.bull == 1) & (df['type'] == "Double Bottom" ) & (df.resistance_support == "over" ) ].gain.sum() , 
    df[ (df.bull == 1) & (df['type'] == "Double Bottom" ) & (df.resistance_support == "over" ) ].gain.count() 
    )
df[ (df.bull == 1) & (df['type'] == "Double Bottom" ) & (df.resistance_support == "over" ) ].gain.sum() / df[ (df.bull == 1) & (df['type'] == "Double Bottom" ) & (df.resistance_support == "over" ) ].gain.count()

# sin resistance_support
print( 
    df[ (df.bull == 1) & (df.D_MVA200 > 0 ) & (df['type'] == "Double Bottom" ) ].gain.sum() , 
    df[ (df.bull == 1) & (df.D_MVA200 > 0 ) & (df['type'] == "Double Bottom" ) ].gain.count() 
    )

df[ (df.bull == 1) & (df.D_MVA200 > 0 ) & (df['type'] == "Double Bottom" ) ].gain.sum() / df[ (df.bull == 1) & (df.D_MVA200 > 0 ) & (df['type'] == "Double Bottom" ) ].gain.count()

# resistance_support != none
print( 
    df[ (df.bull == 1) & (df.D_MVA200 > 0 ) & (df['type'] == "Double Bottom" ) & (df.resistance_support != "none" ) ].gain.sum() , 
    df[ (df.bull == 1) & (df.D_MVA200 > 0 ) & (df['type'] == "Double Bottom" ) & (df.resistance_support != "none" ) ].gain.count() 
    )
df[ (df.bull == 1) & (df.D_MVA200 > 0 ) & (df['type'] == "Double Bottom" ) & (df.resistance_support != "none" ) ].gain.sum() / df[ (df.bull == 1) & (df.D_MVA200 > 0 ) & (df['type'] == "Double Bottom" ) & (df.resistance_support != "none" ) ].gain.count()

# resistance_support != none sin bull
print( 
    df[  (df.D_MVA200 > 0 ) & (df['type'] == "Double Bottom" ) & (df.resistance_support != "none" ) ].gain.sum() , 
    df[  (df.D_MVA200 > 0 ) & (df['type'] == "Double Bottom" ) & (df.resistance_support != "none" ) ].gain.count() 
    )
df[  (df.D_MVA200 > 0 ) & (df['type'] == "Double Bottom" ) & (df.resistance_support != "none" ) ].gain.sum() / df[ (df.D_MVA200 > 0 ) & (df['type'] == "Double Bottom" ) & (df.resistance_support != "none" ) ].gain.count()

# resistance_support != none sin D_MVA200
print( 
    df[ (df.bull == 1) & (df['type'] == "Double Bottom" ) & (df.resistance_support != "none" ) ].gain.sum() , 
    df[ (df.bull == 1) & (df['type'] == "Double Bottom" ) & (df.resistance_support != "none" ) ].gain.count() 
    )
df[ (df.bull == 1) & (df['type'] == "Double Bottom" ) & (df.resistance_support != "none" ) ].gain.sum() / df[ (df.bull == 1) & (df['type'] == "Double Bottom" ) & (df.resistance_support != "none" ) ].gain.count()

# resistance_support != none sin D_MVA200 ,  bull
print( 
    df[ (df['type'] == "Double Bottom" ) & (df.resistance_support != "none" ) ].gain.sum() , 
    df[ (df['type'] == "Double Bottom" ) & (df.resistance_support != "none" ) ].gain.count() 
    )
df[ (df['type'] == "Double Bottom" ) & (df.resistance_support != "none" ) ].gain.sum() / df[ (df['type'] == "Double Bottom" ) & (df.resistance_support != "none" ) ].gain.count()

